#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace app_login
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Tutoring")]
	public partial class TutoringDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertProfesor(Profesor instance);
    partial void UpdateProfesor(Profesor instance);
    partial void DeleteProfesor(Profesor instance);
    partial void InsertScheduling(Scheduling instance);
    partial void UpdateScheduling(Scheduling instance);
    partial void DeleteScheduling(Scheduling instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    #endregion
		
		public TutoringDataContext() : 
				base(global::app_login.Properties.Settings.Default.TutoringConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TutoringDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutoringDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutoringDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutoringDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Enrolled_Subject> Enrolled_Subjects
		{
			get
			{
				return this.GetTable<Enrolled_Subject>();
			}
		}
		
		public System.Data.Linq.Table<Profesor> Profesors
		{
			get
			{
				return this.GetTable<Profesor>();
			}
		}
		
		public System.Data.Linq.Table<Scheduling> Schedulings
		{
			get
			{
				return this.GetTable<Scheduling>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Taught_subject> Taught_subjects
		{
			get
			{
				return this.GetTable<Taught_subject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Admin;
		
		private string _Nume;
		
		private string _Prenume;
		
		private int _ID_User;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AdminChanging(int value);
    partial void OnID_AdminChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnPrenumeChanging(string value);
    partial void OnPrenumeChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    #endregion
		
		public Admin()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Admin", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Admin
		{
			get
			{
				return this._ID_Admin;
			}
			set
			{
				if ((this._ID_Admin != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AdminChanging(value);
					this.SendPropertyChanging();
					this._ID_Admin = value;
					this.SendPropertyChanged("ID_Admin");
					this.OnID_AdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(50)")]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenume", DbType="VarChar(50)")]
		public string Prenume
		{
			get
			{
				return this._Prenume;
			}
			set
			{
				if ((this._Prenume != value))
				{
					this.OnPrenumeChanging(value);
					this.SendPropertyChanging();
					this._Prenume = value;
					this.SendPropertyChanged("Prenume");
					this.OnPrenumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_User", ThisKey="ID_Admin", OtherKey="ID_User", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Admin = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Admin = this;
						this._ID_Admin = value.ID_User;
					}
					else
					{
						this._ID_Admin = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User;
		
		private string _Username;
		
		private string _UserPassword;
		
		private string _UserType;
		
		private string _Email;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<Profesor> _Profesor;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._Admin = default(EntityRef<Admin>);
			this._Profesor = default(EntityRef<Profesor>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(50)")]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_Admin", ThisKey="ID_User", OtherKey="ID_Admin", IsUnique=true, IsForeignKey=false)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.User = null;
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profesor", Storage="_Profesor", ThisKey="ID_User", OtherKey="ID_Prof", IsUnique=true, IsForeignKey=false)]
		public Profesor Profesor
		{
			get
			{
				return this._Profesor.Entity;
			}
			set
			{
				Profesor previousValue = this._Profesor.Entity;
				if (((previousValue != value) 
							|| (this._Profesor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profesor.Entity = null;
						previousValue.User = null;
					}
					this._Profesor.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Profesor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_Student", ThisKey="ID_User", OtherKey="ID_Std", IsUnique=true, IsForeignKey=false)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.User = null;
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrolled_Subjects")]
	public partial class Enrolled_Subject
	{
		
		private System.Nullable<int> _ID_Std;
		
		private System.Nullable<int> _ID_Subj;
		
		public Enrolled_Subject()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Std", DbType="Int")]
		public System.Nullable<int> ID_Std
		{
			get
			{
				return this._ID_Std;
			}
			set
			{
				if ((this._ID_Std != value))
				{
					this._ID_Std = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Subj", DbType="Int")]
		public System.Nullable<int> ID_Subj
		{
			get
			{
				return this._ID_Subj;
			}
			set
			{
				if ((this._ID_Subj != value))
				{
					this._ID_Subj = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profesors")]
	public partial class Profesor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Prof;
		
		private string _Nume;
		
		private string _Prenume;
		
		private string _Profesie_de_baza;
		
		private int _ID_User;
		
		private EntitySet<Scheduling> _Schedulings;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ProfChanging(int value);
    partial void OnID_ProfChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnPrenumeChanging(string value);
    partial void OnPrenumeChanged();
    partial void OnProfesie_de_bazaChanging(string value);
    partial void OnProfesie_de_bazaChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    #endregion
		
		public Profesor()
		{
			this._Schedulings = new EntitySet<Scheduling>(new Action<Scheduling>(this.attach_Schedulings), new Action<Scheduling>(this.detach_Schedulings));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Prof", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Prof
		{
			get
			{
				return this._ID_Prof;
			}
			set
			{
				if ((this._ID_Prof != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ProfChanging(value);
					this.SendPropertyChanging();
					this._ID_Prof = value;
					this.SendPropertyChanged("ID_Prof");
					this.OnID_ProfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(255)")]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenume", DbType="VarChar(255)")]
		public string Prenume
		{
			get
			{
				return this._Prenume;
			}
			set
			{
				if ((this._Prenume != value))
				{
					this.OnPrenumeChanging(value);
					this.SendPropertyChanging();
					this._Prenume = value;
					this.SendPropertyChanged("Prenume");
					this.OnPrenumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profesie_de_baza", DbType="VarChar(255)")]
		public string Profesie_de_baza
		{
			get
			{
				return this._Profesie_de_baza;
			}
			set
			{
				if ((this._Profesie_de_baza != value))
				{
					this.OnProfesie_de_bazaChanging(value);
					this.SendPropertyChanging();
					this._Profesie_de_baza = value;
					this.SendPropertyChanged("Profesie_de_baza");
					this.OnProfesie_de_bazaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profesor_Scheduling", Storage="_Schedulings", ThisKey="ID_Prof", OtherKey="ID_Prof")]
		public EntitySet<Scheduling> Schedulings
		{
			get
			{
				return this._Schedulings;
			}
			set
			{
				this._Schedulings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profesor", Storage="_User", ThisKey="ID_Prof", OtherKey="ID_User", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Profesor = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Profesor = this;
						this._ID_Prof = value.ID_User;
					}
					else
					{
						this._ID_Prof = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Profesor = this;
		}
		
		private void detach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Profesor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedulings")]
	public partial class Scheduling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Meeting;
		
		private System.Nullable<int> _ID_Prof;
		
		private System.Nullable<int> _ID_Std;
		
		private System.Nullable<int> _ID_Subj;
		
		private EntityRef<Profesor> _Profesor;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MeetingChanging(int value);
    partial void OnID_MeetingChanged();
    partial void OnID_ProfChanging(System.Nullable<int> value);
    partial void OnID_ProfChanged();
    partial void OnID_StdChanging(System.Nullable<int> value);
    partial void OnID_StdChanged();
    partial void OnID_SubjChanging(System.Nullable<int> value);
    partial void OnID_SubjChanged();
    #endregion
		
		public Scheduling()
		{
			this._Profesor = default(EntityRef<Profesor>);
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Meeting", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Meeting
		{
			get
			{
				return this._ID_Meeting;
			}
			set
			{
				if ((this._ID_Meeting != value))
				{
					this.OnID_MeetingChanging(value);
					this.SendPropertyChanging();
					this._ID_Meeting = value;
					this.SendPropertyChanged("ID_Meeting");
					this.OnID_MeetingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Prof", DbType="Int")]
		public System.Nullable<int> ID_Prof
		{
			get
			{
				return this._ID_Prof;
			}
			set
			{
				if ((this._ID_Prof != value))
				{
					if (this._Profesor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ProfChanging(value);
					this.SendPropertyChanging();
					this._ID_Prof = value;
					this.SendPropertyChanged("ID_Prof");
					this.OnID_ProfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Std", DbType="Int")]
		public System.Nullable<int> ID_Std
		{
			get
			{
				return this._ID_Std;
			}
			set
			{
				if ((this._ID_Std != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_StdChanging(value);
					this.SendPropertyChanging();
					this._ID_Std = value;
					this.SendPropertyChanged("ID_Std");
					this.OnID_StdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Subj", DbType="Int")]
		public System.Nullable<int> ID_Subj
		{
			get
			{
				return this._ID_Subj;
			}
			set
			{
				if ((this._ID_Subj != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_SubjChanging(value);
					this.SendPropertyChanging();
					this._ID_Subj = value;
					this.SendPropertyChanged("ID_Subj");
					this.OnID_SubjChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profesor_Scheduling", Storage="_Profesor", ThisKey="ID_Prof", OtherKey="ID_Prof", IsForeignKey=true, DeleteRule="CASCADE")]
		public Profesor Profesor
		{
			get
			{
				return this._Profesor.Entity;
			}
			set
			{
				Profesor previousValue = this._Profesor.Entity;
				if (((previousValue != value) 
							|| (this._Profesor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profesor.Entity = null;
						previousValue.Schedulings.Remove(this);
					}
					this._Profesor.Entity = value;
					if ((value != null))
					{
						value.Schedulings.Add(this);
						this._ID_Prof = value.ID_Prof;
					}
					else
					{
						this._ID_Prof = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profesor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Scheduling", Storage="_Student", ThisKey="ID_Std", OtherKey="ID_Std", IsForeignKey=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Schedulings.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Schedulings.Add(this);
						this._ID_Std = value.ID_Std;
					}
					else
					{
						this._ID_Std = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Scheduling", Storage="_Subject", ThisKey="ID_Subj", OtherKey="ID_Subj", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Schedulings.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Schedulings.Add(this);
						this._ID_Subj = value.ID_Subj;
					}
					else
					{
						this._ID_Subj = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Std;
		
		private string _Nume;
		
		private string _Prenume;
		
		private string _Universitate;
		
		private int _ID_User;
		
		private EntitySet<Scheduling> _Schedulings;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_StdChanging(int value);
    partial void OnID_StdChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnPrenumeChanging(string value);
    partial void OnPrenumeChanged();
    partial void OnUniversitateChanging(string value);
    partial void OnUniversitateChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    #endregion
		
		public Student()
		{
			this._Schedulings = new EntitySet<Scheduling>(new Action<Scheduling>(this.attach_Schedulings), new Action<Scheduling>(this.detach_Schedulings));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Std", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Std
		{
			get
			{
				return this._ID_Std;
			}
			set
			{
				if ((this._ID_Std != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_StdChanging(value);
					this.SendPropertyChanging();
					this._ID_Std = value;
					this.SendPropertyChanged("ID_Std");
					this.OnID_StdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(255)")]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenume", DbType="VarChar(255)")]
		public string Prenume
		{
			get
			{
				return this._Prenume;
			}
			set
			{
				if ((this._Prenume != value))
				{
					this.OnPrenumeChanging(value);
					this.SendPropertyChanging();
					this._Prenume = value;
					this.SendPropertyChanged("Prenume");
					this.OnPrenumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Universitate", DbType="VarChar(255)")]
		public string Universitate
		{
			get
			{
				return this._Universitate;
			}
			set
			{
				if ((this._Universitate != value))
				{
					this.OnUniversitateChanging(value);
					this.SendPropertyChanging();
					this._Universitate = value;
					this.SendPropertyChanged("Universitate");
					this.OnUniversitateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Scheduling", Storage="_Schedulings", ThisKey="ID_Std", OtherKey="ID_Std")]
		public EntitySet<Scheduling> Schedulings
		{
			get
			{
				return this._Schedulings;
			}
			set
			{
				this._Schedulings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student", Storage="_User", ThisKey="ID_Std", OtherKey="ID_User", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Student = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Student = this;
						this._ID_Std = value.ID_User;
					}
					else
					{
						this._ID_Std = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Subj;
		
		private string _nume;
		
		private EntitySet<Scheduling> _Schedulings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_SubjChanging(int value);
    partial void OnID_SubjChanged();
    partial void OnnumeChanging(string value);
    partial void OnnumeChanged();
    #endregion
		
		public Subject()
		{
			this._Schedulings = new EntitySet<Scheduling>(new Action<Scheduling>(this.attach_Schedulings), new Action<Scheduling>(this.detach_Schedulings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Subj", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Subj
		{
			get
			{
				return this._ID_Subj;
			}
			set
			{
				if ((this._ID_Subj != value))
				{
					this.OnID_SubjChanging(value);
					this.SendPropertyChanging();
					this._ID_Subj = value;
					this.SendPropertyChanged("ID_Subj");
					this.OnID_SubjChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nume", DbType="VarChar(255)")]
		public string nume
		{
			get
			{
				return this._nume;
			}
			set
			{
				if ((this._nume != value))
				{
					this.OnnumeChanging(value);
					this.SendPropertyChanging();
					this._nume = value;
					this.SendPropertyChanged("nume");
					this.OnnumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Scheduling", Storage="_Schedulings", ThisKey="ID_Subj", OtherKey="ID_Subj")]
		public EntitySet<Scheduling> Schedulings
		{
			get
			{
				return this._Schedulings;
			}
			set
			{
				this._Schedulings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Schedulings(Scheduling entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Taught_subjects")]
	public partial class Taught_subject
	{
		
		private System.Nullable<int> _ID_Prof;
		
		private System.Nullable<int> _ID_Subj;
		
		public Taught_subject()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Prof", DbType="Int")]
		public System.Nullable<int> ID_Prof
		{
			get
			{
				return this._ID_Prof;
			}
			set
			{
				if ((this._ID_Prof != value))
				{
					this._ID_Prof = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Subj", DbType="Int")]
		public System.Nullable<int> ID_Subj
		{
			get
			{
				return this._ID_Subj;
			}
			set
			{
				if ((this._ID_Subj != value))
				{
					this._ID_Subj = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
